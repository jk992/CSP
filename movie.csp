id = {0..3}
bool = {false, true}

peoplePerMovie = 2

datatype movies = Movie1 | Movie2
datatype snacks = Small | Big

channel payCard
channel payCash
channel printOrder
channel printTicket
channel lock
channel unlock
channel kitchen
channel pushButton
channel showOrder
channel movieChoice: id.movies
channel snackChoice: id.snacks
channel serverMovieChannel: movies.id
channel hasSlot: id.movies.bool
channel newOrder: snacks.id
channel sessionMovie: movies.id
channel ticketOk: movies.bool
channel receiveTicket: movies.id

-- Processo do caixa de autoatendimento
TOTEM(idTotem) = movieChoice.idTotem?movie -> TOTEM_MOVIE(idTotem,movie)
TOTEM_MOVIE(idTotem,movie) = serverMovieChannel.movie!idTotem -> TOTEM_AUX(idTotem,movie)
TOTEM_AUX(idTotem,movie) = hasSlot.idTotem.movie?resp ->
					(if (resp == true) then
						(payCard -> printTicket -> TOTEM(idTotem))
						[] snackChoice.idTotem?snack -> payCard -> printTicket -> TOTEM_SNACK(idTotem,snack);TOTEM(idTotem)
					else(TOTEM(idTotem)))
TOTEM_SNACK(idTotem,snack) = newOrder.snack!idTotem -> printOrder -> SKIP

-- Caixa
CASHIER(idCashier) = movieChoice.idCashier?movie -> CASHIER_MOVIE(idCashier,movie)
CASHIER_MOVIE(idCashier,movie) = serverMovieChannel.movie!idCashier -> CASHIER_AUX(idCashier,movie)
CASHIER_AUX(idCashier,movie) = hasSlot.idCashier.movie?resp ->
					(if (resp == true) then
						(payCard -> printTicket -> CASHIER(idCashier))
						[] snackChoice.idTotem?snack -> payCard -> printTicket -> CASHIER_SNACK(idTotem,snack));CASHIER(idCashier)
					else(CASHIER(idCashier)))
CASHIER_SNACK(idTotem,snack) = newOrder.snack!idTotem -> printOrder -> SKIP

-- Processo Servidor de filmes
SERVER_MOVIE(movie, tickets) = serverMovieChannel.movie?idTicket -> (if (getSlot(tickets) == true) then (hasSlot.idTicket.movie!true -> SERVER_MOVIE(movie, tickets^<idTicket>))
																	 else (hasSlot.idTicket.movie!false -> SERVER_MOVIE(movie, <>)))
								[]	sessionMovie.movie?ticket -> (if(checkTicket(ticket, tickets)) then (ticketOk.movie!true -> SERVER_MOVIE(movie,tickets)) else (ticketOk.movie!false -> SERVER_MOVIE(movie,tickets)))


-- Processo Servidor de pedidos
SNACK_BAR(snack) = newOrder.snack?idOrder -> kitchen -> pushButton ->  showOrder -> SNACK_BAR(snack)
	--[] (if(#orders>0) then (showOrder -> SNACK_BAR(snack, removeOrder(orders)))
	--	else (SNACK_BAR(snack,orders)))
	
-- Processo da porta de acesso
TICKET_GATE(movie) = receiveTicket.movie?ticket -> sessionMovie.movie!ticket -> ticketOk.movie?resp -> (if (resp == true) then unlock -> TICKET_GATE(movie) else lock -> TICKET_GATE(movie))

-- Refinamento Totem para socios
TOTEMESP(idTotem) = movieChoice.idTotem?movie -> TOTEM_MOVIEESP(idTotem,movie)
TOTEM_MOVIEESP(idTotem,movie) = serverMovieChannel.movie!idTotem -> TOTEM_AUXESP(idTotem,movie)
TOTEM_AUXESP(idTotem,movie) = hasSlot.idTotem.movie?resp -> snackChoice.idTotem?snack -> printTicket -> TOTEM_SNACKESP(idTotem,snack);TOTEMESP(idTotem)				
TOTEM_SNACKESP(idTotem,snack) = newOrder.snack!idTotem -> printOrder -> SKIP



-- Funções auxiliares
getSlot(tickets) =
	if(#tickets == peoplePerMovie) then
		false
	else
		true

checkTicket(ticket, tickets) =
	if(elem(ticket, tickets)) then
		true
	else 
		false
		
removeOrder(orders) = tail(orders)
		
-- Sistema
TOTENS = ||| i:{0..1}@TOTEM(i)
TOTENSESP = ||| J:{0..1}@TOTEMESP(J)
CASHIERS = ||| k:{2..3}@CASHIER(k)
SERVER_MOVIES = ||| m:movies@SERVER_MOVIE(m,<>)
TICKET_GATES = ||| t:movies@TICKET_GATE(t)
SNACK_BARS = ||| s:snacks@SNACK_BAR(s)

events_tot_cas_ser = {|serverMovieChannel,hasSlot|}
events_sba_tot = {|newOrder|}
events_ser_tga = {|sessionMovie,ticketOk|}

SYSTEM = ((((TOTENS[|events_tot_cas_ser|]SERVER_MOVIES) [|events_tot_cas_ser|] CASHIERS) [|events_sba_tot|] SNACK_BARS) [|events_ser_tga|] TICKET_GATES)

assert SYSTEM :[livelock free]
assert SYSTEM :[deadlock free]
assert SYSTEM :[deterministic]
assert TOTENS\{|payCard|}[FD=TOTENSESP
